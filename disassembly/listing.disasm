Disassembly Listing for 84-Test
Generated From:
/Users/dolenle/MPLABXProjects/84-Test.X/dist/default/production/84-Test.X.production.cof
Nov 21, 2014 4:08:03 PM

---  /Users/dolenle/MPLABXProjects/84-Test.X/main.asm  --------------------------------------------------
                                                  1:         LIST	P=PIC16F84, R=hex ;Set processor type and default radix
                                                  2:         INCLUDE "p16F84.inc"   ;include chip-specific constants
                                                  3:     
                                                  4:         __CONFIG _CP_OFF  & _PWRTE_ON  & _WDT_OFF & _HS_OSC
                                                  5:             ;Code protect off, power-on timer off, watchdog off, high-speed xtal
                                                  6:     
                                                  7:     
                                                  8:     #define srdata PORTB, 2 ;Actual pin 8
                                                  9:     #define srclock PORTB, 3 ;Actual pin 9
                                                  10:    #define srlatch PORTB, 1 ;Actual pin 7
                                                  11:    
                                                  12:    COUNT   EQU 0x0C    ;counter value - any function that uses it must inititalize
                                                  13:    DELAY   EQU 0x0D    ;millisecond delay
                                                  14:    BUFF 	EQU	0x0E	;EEPROM/LCD data buffer
                                                  15:    STA     EQU 0x0F    ;LCD status and Stack pointer (lower 3 bits)
                                                  16:    CELL    EQU 0x10    ;brainfuck cell pointer - upper 2 status bits: lcd cmd/dat, edit/run,
                                                  17:    INST    EQU 0x11    ;brainfuck instruction pointer and input counter
                                                  18:    
                                                  19:        ORG 0x00
0000  2820     GOTO 0x20                          20:    	goto	start
                                                  21:    
                                                  22:        ORG 0x04 ;ISR
                                                  23:        
0004  1C8B     BTFSS INTCON, 0x1                  24:        btfss   INTCON, INTF ;external interrupt (buttons) or onchange?
0005  280C     GOTO 0xC                           25:        goto    isr2    ;skip
0006  108B     BCF INTCON, 0x1                    26:        bcf     INTCON, INTF ;clear ext interrupt flag
0007  0805     MOVF PORTA, W                      27:        movfw   PORTA   ;quickly, read input into W
0008  3907     ANDLW 0x7                          28:        andlw   0x07    ;keep 3 bits
0009  1F10     BTFSS 0x10, 0x6                    29:        btfss   CELL, 6     ;check mode
000A  284A     GOTO 0x4A                          30:        goto    isr_editor  ;edit
000B  2865     GOTO 0x65                          31:        goto    isr_input   ;input
                                                  32:    isr2    ;continue
000C  303C     MOVLW 0x3C                         33:        movlw 0x3C
000D  008E     MOVWF 0xE                          34:        movwf BUFF
000E  2066     CALL 0x66                          35:        call lcd_write
000F  108B     BCF INTCON, 0x1                    36:        bcf INTCON, INTF
                                                  37:        
0010  0009     RETFIE                             38:        retfie ;return
                                                  39:    
                                                  40:    msg					; first message to display
0011  0782     ADDWF PCL, F                       41:    	addwf	PCL, f
0012  3450     RETLW 0x50                         42:    	dt "PIC BrainFuck", 0 ;define table (retlw for each char)
0013  3449     RETLW 0x49
0014  3443     RETLW 0x43
0015  3420     RETLW 0x20
0016  3442     RETLW 0x42
0017  3472     RETLW 0x72
0018  3461     RETLW 0x61
0019  3469     RETLW 0x69
001A  346E     RETLW 0x6E
001B  3446     RETLW 0x46
001C  3475     RETLW 0x75
001D  3463     RETLW 0x63
001E  346B     RETLW 0x6B
001F  3400     RETLW 0x0
                                                  43:    
                                                  44:    start:
0020  1683     BSF STATUS, 0x5                    45:    	bsf     STATUS, RP0	;Bank 1
0021  3001     MOVLW 0x1                          46:        movlw	0x01	; input on pin 0
0022  0086     MOVWF PORTB                        47:    	movwf	TRISB	;set PORTB output
0023  300F     MOVLW 0xF                          48:        movlw	0x0F
0024  0085     MOVWF PORTA                        49:    	movwf	TRISA	;set PORTA input
0025  1283     BCF STATUS, 0x5                    50:        bcf     STATUS, RP0	;bank 0
0026  0186     CLRF PORTB                         51:        clrf    PORTB
                                                  52:    
0027  3032     MOVLW 0x32                         53:        movlw   .50
0028  008D     MOVWF 0xD                          54:        movwf   DELAY
0029  20B6     CALL 0xB6                          55:        call    wait   ;delay 50ms
                                                  56:        
002A  2098     CALL 0x98                          57:        call    resetLCD
002B  1310     BCF 0x10, 0x6                      58:        bcf     CELL, 6 ;editor mode
002C  20BE     CALL 0xBE                          59:        call    wait50
002D  0191     CLRF 0x11                          60:        clrf    INST
                                                  61:    splash  ;display splash message
002E  0811     MOVF 0x11, W                       62:        movfw	INST            ;temporarily use INST as index
002F  2011     CALL 0x11                          63:    	call	msg			; get the next char
0030  3800     IORLW 0x0                          64:    	iorlw	0			; end of string?
0031  1903     BTFSC STATUS, 0x2                  65:    	btfsc	STATUS, Z
0032  283A     GOTO 0x3A                          66:    	goto 	run			; YES - jump out of the loop
0033  008E     MOVWF 0xE                          67:        movwf   BUFF
0034  2066     CALL 0x66                          68:    	call 	lcd_write		; NO - send it to LCD
0035  0A91     INCF 0x11, F                       69:    	incf	INST, F		; update the char index
0036  301F     MOVLW 0x1F                         70:        movlw   0x1F
0037  008D     MOVWF 0xD                          71:        movwf   DELAY   ;create scroll effect
0038  20B6     CALL 0xB6                          72:        call    wait
0039  282E     GOTO 0x2E                          73:    	goto 	splash
                                                  74:    
                                                  75:    run
003A  30FF     MOVLW 0xFF                         76:        movlw   0xFF
003B  008D     MOVWF 0xD                          77:        movwf   DELAY ;delay ~1 second
003C  20B6     CALL 0xB6                          78:        call    wait
003D  008D     MOVWF 0xD                          79:        movwf   DELAY
003E  20B6     CALL 0xB6                          80:        call    wait
003F  008D     MOVWF 0xD                          81:        movwf   DELAY
0040  20B6     CALL 0xB6                          82:        call    wait
0041  008D     MOVWF 0xD                          83:        movwf   DELAY
0042  20B6     CALL 0xB6                          84:        call    wait
0043  2098     CALL 0x98                          85:        call    resetLCD
                                                  86:    
0044  0191     CLRF 0x11                          87:        clrf    INST
0045  0189     CLRF EEADR                         88:        clrf    EEADR  ;EEPROM address 0x00 reserved for command count
0046  160B     BSF INTCON, 0x4                    89:        bsf     INTCON, INTE    ;enable ext. interrupt on RB0
0047  178B     BSF INTCON, 0x7                    90:        bsf     INTCON, GIE ;global interrupt enable
                                                  91:    
                                                  92:    
                                                  93:    main:
0048  0186     CLRF PORTB                         94:        clrf PORTB
0049  2848     GOTO 0x48                          95:        goto main
                                                  96:    
                                                  97:    isr_editor:     ;write command (in W) to eeprom and LCD (as ASCII)
004A  008E     MOVWF 0xE                          98:        movwf   BUFF  ;store input temporarily
                                                  99:    ;    btfss   INST    ;even instruction, store in next byte
                                                  100:   ;    incf    EEADR
004B  190E     BTFSC 0xE, 0x2                     101:       btfsc   BUFF, 2 ;check 3rd bit
004C  2851     GOTO 0x51                          102:       goto    ptrops
004D  3E03     ADDLW 0x3                          103:       addlw   0x03 ;convert to ascii
004E  3828     IORLW 0x28                         104:       iorlw   0x28
004F  008E     MOVWF 0xE                          105:       movwf   BUFF
0050  2858     GOTO 0x58                          106:       goto    isr_editor_cont
                                                  107:   ptrops     ;pointer control commands
0051  383C     IORLW 0x3C                         108:       iorlw   0x3C ;< >
0052  180E     BTFSC 0xE, 0x0                     109:       btfsc   BUFF, 0 ;check 0th bit
0053  3A60     XORLW 0x60                         110:       xorlw   0x60 ;_ ]
0054  008E     MOVWF 0xE                          111:       movwf   BUFF
0055  3C5F     SUBLW 0x5F                         112:       sublw   0x5F ;correct _ into [
0056  1903     BTFSC STATUS, 0x2                  113:       btfsc   STATUS, Z
0057  110E     BCF 0xE, 0x2                       114:       bcf     BUFF, 2
                                                  115:   
                                                  116:   isr_editor_cont
0058  2066     CALL 0x66                          117:       call    lcd_write
0059  0A91     INCF 0x11, F                       118:       incf    INST
005A  0811     MOVF 0x11, W                       119:       movfw   INST
005B  3C10     SUBLW 0x10                         120:       sublw   0x10
005C  391F     ANDLW 0x1F                         121:       andlw   0x1F
005D  1903     BTFSC STATUS, 0x2                  122:       btfsc   STATUS, Z  ;if line full (16 chars), move lcd cursor
005E  20B0     CALL 0xB0                          123:       call    lcd_line2
005F  0811     MOVF 0x11, W                       124:       movfw   INST    ;repeat for 32
0060  3C20     SUBLW 0x20                         125:       sublw   0x20
0061  391F     ANDLW 0x1F                         126:       andlw   0x1F
0062  1903     BTFSC STATUS, 0x2                  127:       btfsc   STATUS, Z  ;if line full (16 chars), move lcd cursor
0063  2098     CALL 0x98                          128:       call    resetLCD   ;clear the screen
0064  0009     RETFIE                             129:       retfie
                                                  130:   
                                                  131:   isr_input:      ;write byte to cell
0065  0009     RETFIE                             132:       retfie
                                                  133:   
                                                  134:   lcd_write:      ;write BUFF to the LCD via shift register
0066  207D     CALL 0x7D                          135:       call shift4
0067  1506     BSF PORTB, 0x2                     136:       bsf srdata  ;E=1
0068  208E     CALL 0x8E                          137:       call shift2
0069  2088     CALL 0x88                          138:       call right4 ;reset BUFF
                                                  139:   
006A  207D     CALL 0x7D                          140:       call shift4
006B  1106     BCF PORTB, 0x2                     141:       bcf srdata  ;E=0, falling edge reads in data
006C  208E     CALL 0x8E                          142:       call shift2
006D  3002     MOVLW 0x2                          143:       movlw .2
006E  008D     MOVWF 0xD                          144:       movwf DELAY
006F  20B6     CALL 0xB6                          145:       call wait   ;delay
                                                  146:   
                                                  147:       ;repeat for 2nd nibble
0070  207D     CALL 0x7D                          148:       call shift4
0071  1506     BSF PORTB, 0x2                     149:       bsf srdata  ;E=1
0072  208E     CALL 0x8E                          150:       call shift2
0073  2088     CALL 0x88                          151:       call right4 ;reset BUFF
                                                  152:   
0074  207D     CALL 0x7D                          153:       call shift4
0075  1106     BCF PORTB, 0x2                     154:       bcf srdata  ;E=0, falling edge reads in data
0076  208E     CALL 0x8E                          155:       call shift2
0077  3002     MOVLW 0x2                          156:       movlw .2
0078  008D     MOVWF 0xD                          157:       movwf DELAY
0079  20B6     CALL 0xB6                          158:       call wait   ;delay
007A  2088     CALL 0x88                          159:       call right4
007B  2088     CALL 0x88                          160:       call right4 ;BUFF back to orig. position
                                                  161:       
007C  0008     RETURN                             162:       return
                                                  163:   
                                                  164:   shift4:     ;shift 4 bits of BUFF w/o latching
007D  3004     MOVLW 0x4                          165:       movlw 0x04
007E  008C     MOVWF 0xC                          166:       movwf COUNT
                                                  167:   l4_loop
007F  0D8E     RLF 0xE, F                         168:       rlf BUFF, F ;rotate left thru carry
0080  1106     BCF PORTB, 0x2                     169:       bcf srdata
0081  1803     BTFSC STATUS, 0x0                  170:       btfsc STATUS, C ;write carry bit to sr data
0082  1506     BSF PORTB, 0x2                     171:       bsf srdata
0083  1586     BSF PORTB, 0x3                     172:       bsf srclock ;pulse clock
0084  1186     BCF PORTB, 0x3                     173:       bcf srclock
0085  0B8C     DECFSZ 0xC, F                      174:       decfsz COUNT
0086  287F     GOTO 0x7F                          175:       goto l4_loop ;repeat
0087  0008     RETURN                             176:       return
                                                  177:   
                                                  178:   right4:     ;rotate BUFF 4 bits right to original position
0088  3004     MOVLW 0x4                          179:       movlw 0x04
0089  008C     MOVWF 0xC                          180:       movwf COUNT
                                                  181:   r4_loop
008A  0C8E     RRF 0xE, F                         182:       rrf BUFF, F
008B  0B8C     DECFSZ 0xC, F                      183:       decfsz COUNT
008C  288A     GOTO 0x8A                          184:       goto r4_loop
008D  0008     RETURN                             185:       return
                                                  186:   
                                                  187:   shift2:     ;shift out the last 2 bits (Enable then RS), then latch
008E  1586     BSF PORTB, 0x3                     188:       bsf srclock ;shift out
008F  1186     BCF PORTB, 0x3                     189:       bcf srclock
0090  1106     BCF PORTB, 0x2                     190:       bcf srdata  ;register zero (cmd)
0091  1B90     BTFSC 0x10, 0x7                    191:       btfsc CELL, 7 ;use DC as a flag for RS
0092  1506     BSF PORTB, 0x2                     192:       bsf srdata
0093  1586     BSF PORTB, 0x3                     193:       bsf srclock ;shift out
0094  1186     BCF PORTB, 0x3                     194:       bcf srclock
0095  1486     BSF PORTB, 0x1                     195:       bsf srlatch ;latch out data
0096  1086     BCF PORTB, 0x1                     196:       bcf srlatch
0097  0008     RETURN                             197:       return
                                                  198:   
                                                  199:   resetLCD:    ;initialize LCD - E, RS and D4-D7 to upper 6 bits of 4094
0098  1390     BCF 0x10, 0x7                      200:       bcf CELL, 7      ;LCD command mode
0099  3033     MOVLW 0x33                         201:       movlw b'00110011' ;initialize lcd (try 2 times)
009A  008E     MOVWF 0xE                          202:       movwf BUFF
009B  2066     CALL 0x66                          203:       call lcd_write
009C  3030     MOVLW 0x30                         204:       movlw b'00110000' ;one last try
009D  008E     MOVWF 0xE                          205:       movwf BUFF
009E  2066     CALL 0x66                          206:       call lcd_write
009F  3002     MOVLW 0x2                          207:       movlw b'00000010' ;command for 4-bit mode (swapped)
00A0  008E     MOVWF 0xE                          208:       movwf BUFF
00A1  2066     CALL 0x66                          209:       call lcd_write
00A2  3028     MOVLW 0x28                         210:       movlw b'00101000'   ;Function set, config display
00A3  008E     MOVWF 0xE                          211:       movwf BUFF
00A4  2066     CALL 0x66                          212:       call lcd_write
00A5  300F     MOVLW 0xF                          213:       movlw b'00001111'   ;lcd on w/ blinking cursor
00A6  008E     MOVWF 0xE                          214:       movwf BUFF
00A7  2066     CALL 0x66                          215:       call lcd_write
00A8  3001     MOVLW 0x1                          216:       movlw b'00000001'   ;clear disp
00A9  008E     MOVWF 0xE                          217:       movwf BUFF
00AA  2066     CALL 0x66                          218:       call lcd_write
00AB  3006     MOVLW 0x6                          219:       movlw b'00000110'   ;enter data, auto increment addr.
00AC  008E     MOVWF 0xE                          220:       movwf BUFF
00AD  2066     CALL 0x66                          221:       call lcd_write
00AE  1790     BSF 0x10, 0x7                      222:       bsf CELL, 7 ;back to lcd data mode
00AF  0008     RETURN                             223:       return
                                                  224:   
                                                  225:   lcd_line2: ;move lcd cursor to the 2nd line
00B0  1390     BCF 0x10, 0x7                      226:       bcf CELL, 7  ;lcd command
00B1  30A8     MOVLW 0xA8                         227:       movlw 0xA8
00B2  008E     MOVWF 0xE                          228:       movwf BUFF
00B3  2066     CALL 0x66                          229:       call lcd_write
00B4  1790     BSF 0x10, 0x7                      230:       bsf CELL, 7 ;back to data mode
00B5  0008     RETURN                             231:       return
                                                  232:   
                                                  233:   
                                                  234:   ;inc_ptr ;increment data pointer (<)
                                                  235:   ;    return
                                                  236:   ;
                                                  237:   ;dec_ptr ;decrement data pointer (>)
                                                  238:   ;    return
                                                  239:   ;
                                                  240:   ;inc_cell ;increment byte (+)
                                                  241:   ;    return
                                                  242:   ;
                                                  243:   ;dec_cell ;decement byte (-)
                                                  244:   ;    return
                                                  245:   ;
                                                  246:   ;out_cell ;display byte on LCD  (.)
                                                  247:   ;    return
                                                  248:   ;
                                                  249:   ;in_cell ;load input into byte (,)
                                                  250:   ;    return
                                                  251:   
                                                  252:   wait:    ;wait approx. DELAY millisecs
00B6  30C8     MOVLW 0xC8                         253:   	movlw 	.200     ;run 200 times
                                                  254:   waitloop
00B7  008C     MOVWF 0xC                          255:       movwf   COUNT   ;1 microsecond per cycle w/ 4MHz xtal
                                                  256:   
00B8  28B9     GOTO 0xB9                          257:       goto    $+1     ;2 cycles
00B9  0B8C     DECFSZ 0xC, F                      258:       decfsz  COUNT   ;1 cycle
00BA  28B8     GOTO 0xB8                          259:       goto    $-2     ;2 cycles
                                                  260:   
00BB  0B8D     DECFSZ 0xD, F                      261:   	decfsz	DELAY
00BC  28B7     GOTO 0xB7                          262:   	goto 	waitloop
00BD  0008     RETURN                             263:   	return
                                                  264:   
                                                  265:   wait50:     ;wait approx. 50 microseconds
00BE  3009     MOVLW 0x9                          266:   	movlw 	.9     ;run 9 times
00BF  008C     MOVWF 0xC                          267:       movwf   COUNT   ;1 microsecond per cycle w/ 4MHz xtal
                                                  268:   
00C0  28C1     GOTO 0xC1                          269:       goto    $+1     ;2 cycles
00C1  0B8C     DECFSZ 0xC, F                      270:       decfsz  COUNT   ;1 cycle
00C2  28C0     GOTO 0xC0                          271:       goto    $-2     ;2 cycles
00C3  0000     NOP                                272:       nop
00C4  0008     RETURN                             273:   	return
                                                  274:   
                                                  275:   addinst:    ;write new instruction
00C5  0008     RETURN                             276:       return
2007  0000     NOP                                277:       END
